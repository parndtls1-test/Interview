import json

Serialization (Python → JSON)
| Function             | Description                               | Example                                   |
| -------------------- | ----------------------------------------- | ----------------------------------------- |
| json.dumps(obj)      | Converts Python object to JSON **string** | `json_str = json.dumps({"a": 1})`         |
| json.dump(obj, fp)   | Writes Python object as JSON to **file**  | `json.dump(data, open("file.json", "w"))` |

Deserialization (JSON → Python)
| Function               | Description                                      | Example                              |
| ---------------------- | ------------------------------------------------ | ------------------------------------ |
| `json.loads(json_str)` | Converts JSON **string** to Python object        | `obj = json.loads('{"a": 1}')`       |
| `json.load(fp)`        | Reads JSON from file and parses to Python object | `obj = json.load(open("file.json"))` |

json.dumps(obj, indent=2, sort_keys=True, ensure_ascii=False)
indent=2: Pretty print
sort_keys=True: Sort keys alphabetically
ensure_ascii=False: Allow Unicode characters

from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str

user = User(id=1, name="Alice")


| Action                       | Example                                               |
| ---------------------------- | ----------------------------------------------------- |
| Convert model to dict        | `user.dict()`                                         |
| Convert model to JSON string | `user.json()`                                         |
| Create model from dict       | `User(**data_dict)`                                   |
| Create model from JSON       | `User.parse_raw(json_str)`                            |
| Save model to JSON file      | `with open("u.json", "w") as f: f.write(user.json())` |
| Load model from file         | `User.parse_file("u.json")`                           |

Notes
dumps = string
dump = file
loads = string input
load = file input
--------------------------------------------------
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str
    active: bool = True

user = User(id=1, name="Alice")
data = user.model_dump()
# {'id': 1, 'name': 'Alice', 'active': True}
--------------------------------------------------
user.model_dump(include={"id", "name"})
user.model_dump(exclude={"active"})
user.model_dump(by_alias=True)
user.model_dump(exclude_unset=True)

| Option                  | Description                                |
| ----------------------- | ------------------------------------------ |
| `include`               | Only include these fields                  |
| `exclude`               | Skip these fields                          |
| `by_alias=True`         | Use field aliases as keys                  |
| `exclude_unset=True`    | Only include fields explicitly set by user |
| `exclude_defaults=True` | Exclude values that are the default        |
| `exclude_none=True`     | Exclude fields with `None`                 |




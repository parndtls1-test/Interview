Retry_Logic:
APIs sometimes fail due to issues like network glitches, temporary downtime, or throttling. Retry logic helps recover from these failures gracefully.

Key Patterns:
Exponential backoff: Wait longer between each retry (1s, 2s, 4s, 8s, etc.)
Jitter: Add randomness to prevent thundering herd issues.
Max retries: Set a cap to avoid infinite loops.

import time
import requests

def fetch_data(url, max_retries=5):
    for attempt in range(max_retries):
        try:
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            if attempt < max_retries - 1:
                wait = 2 ** attempt  # Exponential backoff
                print(f"Retrying in {wait} seconds...")
                time.sleep(wait)
            else:
                raise e
------------------------------------
Timeout Handling:
Avoid your app hanging forever waiting for a response. Timeouts protect your system and allow fallback logic.

Types:
Connection timeout: Time to establish a TCP connection
Read timeout: Time to wait for the response

# Set both connection and read timeout to 5 seconds
requests.get("https://api.example.com/data", timeout=(5, 5))
------------------------------------
Rate Limit Handling
âœ… Why It Matters:
Most APIs enforce a rate limit (e.g., 100 requests/minute). If you exceed it, they return 429 Too Many Requests.

Strategy:
Check response headers like X-RateLimit-Remaining, Retry-After
Back off or throttle requests based on that

response = requests.get("https://api.example.com/data")

if response.status_code == 429:
    retry_after = int(response.headers.get("Retry-After", 1))
    print(f"Rate limited. Retrying in {retry_after} seconds...")
    time.sleep(retry_after)

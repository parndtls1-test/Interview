tuple  immutable, ordered, iterable
list   mutable,   ordered, iterable, not hashable
dict   mutable,   ordered, iterable, not hashable
set    mutable,  unordered, iterable, unique, not hashable
frozenset immutable, unordered, iterable, hashable
string immutable, ordered, iterable

List of immutable types and hashable:
int, float, decimal, complex, bool, string, tuple, range, frozenset, bytes

List of mutable types NOT hashable:
list, dict, set, bytearray, user-defined classes

Hashable objects are commonly used as keys in dictionaries or elements in sets,
where quick look-up times are desired. When an object is hashed, it produces a hash value,
which is used as the key to store or retrieve the object efficiently in data structures like dictionaries and sets.

| Feature             | List (`[]`)            | Tuple (`()`)                      |
| ------------------- | ---------------------- | --------------------------------- |
| **Mutable**         | ✅ Yes                 | ❌ No (Immutable)                |
| **Syntax**          | `my_list = [1, 2]`     | `my_tuple = (1, 2)`               |
| **Performance**     | Slower (more flexible) | Faster (less overhead)            |
| **Can be changed**  | ✅ Add/remove items   | ❌ Fixed after creation           |
| **Use in dict key** | ❌ No (unhashable)    | ✅ Yes (if all items are hashable)|
| **Memory usage**    | More memory            | Less memory                       |

Use a list when:
You need to modify the data (add/remove/change items)
The collection is homogeneous and will be processed/iterated
Order matters and may change
You're dealing with a sequence that grows/shrinks dynamically

Use a tuple when:
You need an immutable record
The data is heterogeneous (e.g., a record with different data types)
You want to use the object as a key in a dictionary
You want faster iteration and smaller memory footprint
You want to signal that the data should not change
